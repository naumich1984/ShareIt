CREATE TABLE IF NOT EXISTS users (
  user_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  email VARCHAR(512) NOT NULL,
  CONSTRAINT pk_user PRIMARY KEY (user_id),
  CONSTRAINT UQ_USER_EMAIL UNIQUE (email)
);

CREATE TABLE IF NOT EXISTS requests (
  request_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  description VARCHAR(32000) NOT NULL,
  user_id BIGINT NOT NULL,
  created TIMESTAMP NOT NULL,
  CONSTRAINT pk_request PRIMARY KEY (request_id),
  CONSTRAINT fk_requests_to_users FOREIGN KEY(user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS items (
  item_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
  name VARCHAR(255) NOT NULL,
  description VARCHAR(32000),
  available BOOLEAN NOT NULL,
  user_id BIGINT NOT NULL,
  request_id BIGINT,
  CONSTRAINT pk_item PRIMARY KEY (item_id),
  CONSTRAINT fk_items_to_users FOREIGN KEY(user_id) REFERENCES users(user_id) on delete cascade,
  CONSTRAINT fk_items_to_requests FOREIGN KEY(request_id) REFERENCES requests(request_id) on delete cascade,
  CONSTRAINT uq_user_item_name UNIQUE(user_id, name)
);

CREATE TABLE IF NOT EXISTS bookings (
    booking_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    start_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    end_date TIMESTAMP WITHOUT TIME ZONE NOT NULL,
    item_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    status VARCHAR(32) NOT NULL,
    CONSTRAINT pk_bookings PRIMARY KEY (booking_id),
    CONSTRAINT fk_bookings_to_items FOREIGN KEY(item_id) REFERENCES items(item_id),
    CONSTRAINT fk_bookings_to_users FOREIGN KEY(user_id) REFERENCES users(user_id)
);

CREATE TABLE IF NOT EXISTS comments (
    comment_id BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    text VARCHAR(32000) NOT NULL,
    item_id BIGINT NOT NULL,
    user_id BIGINT NOT NULL,
    created TIMESTAMP NOT NULL,
    CONSTRAINT pk_comments PRIMARY KEY (comment_id),
    CONSTRAINT fk_comments_to_items FOREIGN KEY(item_id) REFERENCES items(item_id),
    CONSTRAINT fk_comments_to_users FOREIGN KEY(user_id) REFERENCES users(user_id)
);
